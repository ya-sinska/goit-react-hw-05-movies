{"version":3,"file":"static/js/Reviews.74b09f2c.chunk.js","mappings":"0SAEaA,EAAOC,EAAAA,EAAAA,GAAH,gEAIJC,EAAOD,EAAAA,EAAAA,GAAH,qPAYJE,EAAQF,EAAAA,EAAAA,EAAH,gFAKLG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,IAAPJ,CAAJ,4C,6BCnBJK,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAErB,OADAC,EAAAA,GAAAA,WAAgC,MACxB,8BACgB,IAAnBD,EAAQE,QAAgB,SAACC,EAAA,EAAD,CAAgBC,KAAM,gBAAoB,SAACX,EAAD,UAC9DO,EAAQK,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACb,UAACZ,EAAD,YACQ,UAACC,EAAD,YACI,SAACC,EAAD,IADJ,UAEYS,MAChB,uBAAIC,MAJGD,WCNR,SAASE,IACpB,IAEMR,ECHqB,SAACS,GAC5B,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOV,EAAP,KAAgBW,EAAhB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAE8BC,EAAAA,EAAAA,IAAiBJ,GAF/C,OAEcT,EAFd,OAGQW,EAAWX,GAHnB,gDAMQc,QAAQC,IAAI,KAAMC,UAClBC,EAAAA,EAAAA,GAAO,KAAMD,SAPrB,0DADY,uBAAC,WAAD,wBAWZE,KACD,CAACT,IAEGT,EDbSmB,EAFCC,EAAAA,EAAAA,MAATC,KACaC,MAAM,cAAc,IAGzC,OACC,8BACKtB,IAAW,SAACD,EAAD,CAAQC,QAASA","sources":["components/Review/Reviev.styled.js","components/Review/Reviev.jsx","pages/Reviews/Reviews.jsx","hooks/useFetchReviews.js"],"sourcesContent":["import styled from \"@emotion/styled\"\nimport{AiOutlineUser} from 'react-icons/ai'\nexport const List = styled.ul`\nlist-style-type: none;\npadding: 10px;\n`\nexport const Item = styled.li`\nfont-size:16px;\nfont-family: 'Work Sans', sans-serif;\nfont-weight:400;\ncolor: #ca7628;\nborder: 1px solid rgba(255,185,43,0.66);;\nborder-radius: 10px;\npadding: 20px;\n&:not(:last-child){\n    margin-bottom:15px;\n}\n`\nexport const Autor = styled.p`\nfont-size:18px;\nfont-weight:600;\nmargin-bottom:10px;\n`\nexport const Icon  = styled(AiOutlineUser)`\nmargin-right:10px;\n`\n","import PropTypes from 'prop-types';\nimport { List, Item, Autor, Icon } from \"./Reviev.styled\"\nimport * as Scroll from 'react-scroll';\nimport { NoFetchResults } from \"components/NoFetchResults/NoFetchResults\";\nexport const Review = ({ reviews }) => {\n    Scroll.animateScroll.scrollMore(500);\n    return (<>\n        {reviews.length === 0 ? (<NoFetchResults text={'No reviews'}/>) : (<List>\n            {reviews.map(({ author, content }) =>\n            <Item key={author}>\n                    <Autor>\n                        <Icon/>\n                        Autor: {author}</Autor>\n                <p>{content }</p>\n            </Item>)}\n    </List>)}\n    </>\n    )\n}\n\nReview.propTypes = {\n    reviews: PropTypes.array.isRequired,\n}","import { useParams } from \"react-router-dom\";\nimport { useFetchReviews } from \"hooks/useFetchReviews\";\nimport { Review } from \"components/Review/Reviev\";\nexport default function Reviews () {\n    const { slug } = useParams();\n    const movieId = slug.match(/[a-z0-9]+$/)[0];\n    const reviews = useFetchReviews(movieId);\n   \n    return (\n     <>\n        { reviews && <Review reviews={reviews }/>}\n    </>  \n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { fetchReviewsById} from \"servises/moviesApi\"\nimport { notifi } from \"servises/notify\";\nexport const useFetchReviews = (id) => {\n    const [reviews, setReviews] = useState([]);  \n    useEffect(() => {  \n        async function fetch() {\n            try {\n                const reviews = await fetchReviewsById(id);\n                setReviews(reviews);\n            }\n            catch (error) {\n                console.log(error.message);\n                notifi(error.message);\n            }\n        }\n        fetch();\n    }, [id]);\n\n    return reviews;\n};"],"names":["List","styled","Item","Autor","Icon","AiOutlineUser","Review","reviews","Scroll","length","NoFetchResults","text","map","author","content","Reviews","id","useState","setReviews","useEffect","fetchReviewsById","console","log","message","notifi","fetch","useFetchReviews","useParams","slug","match"],"sourceRoot":""}