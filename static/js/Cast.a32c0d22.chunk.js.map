{"version":3,"file":"static/js/Cast.a32c0d22.chunk.js","mappings":"0SACaA,EAAOC,EAAAA,EAAAA,GAAH,6LAQJC,EAAOD,EAAAA,EAAAA,GAAH,0HAMJE,EAAQF,EAAAA,EAAAA,IAAH,uCAGLG,EAAOH,EAAAA,EAAAA,EAAH,2E,6BCZJI,EAAS,SAAC,GAAa,IAAXC,EAAU,EAAVA,KAErB,OADAC,EAAAA,GAAAA,WAAgC,MAE5B,8BAEyB,IAArBD,EAAKA,KAAKE,QAAgB,SAACC,EAAA,EAAD,CAAgBC,KAAM,8BAC3C,SAACV,EAAD,UACIM,EAAKA,KAAKK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OAAuC,UAACZ,EAAD,WACjDY,GAAgB,SAACX,EAAD,CAAOY,IAAG,UAThC,mCASgC,OAAkBD,GAAgBE,IAAKJ,KAAa,SAACT,EAAD,CAAOY,IAAG,UAAKE,GAASD,IAAI,eAC3G,SAACZ,EAAD,UAAOQ,KACP,uBAAIC,MAHyDD,WCVtE,SAASM,IACpB,IACOZ,ECDiB,SAACa,GACzB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOd,EAAP,KAAae,EAAb,KAcA,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAE2BC,EAAAA,EAAAA,IAAeJ,GAF1C,OAEcb,EAFd,OAGQe,EAAQf,GAHhB,gDAMQkB,QAAQC,IAAI,KAAMC,UAClBC,EAAAA,EAAAA,GAAO,KAAMD,SAPrB,0DADY,uBAAC,WAAD,wBAWZE,KACD,CAACT,IACGb,EDdOuB,EADMC,EAAAA,EAAAA,MAAZC,SAGR,OAAQ,8BACPzB,IAAM,SAACD,EAAD,CAAQC,KAAMA,Q,0MENZ0B,EAAW,mCAAG,6GAEJC,IAAAA,IAAA,4FAFI,cAEjBC,EAFiB,yBAGhBA,EAAKA,KAAKC,SAHM,gCAKxBX,QAAQC,IAAI,QAAZ,MALwB,yDAAH,qDASXW,EAAe,mCAAG,WAAOjB,GAAP,gGAERc,IAAAA,IAAA,6CAAgDd,EAAhD,8CAFQ,cAErBe,EAFqB,yBAGpBA,EAAKA,MAHe,gCAK3BV,QAAQC,IAAI,QAAZ,MAL2B,yDAAH,sDASfY,EAAgB,mCAAG,WAAOlB,GAAP,gGAETc,IAAAA,IAAA,6CAAgDd,EAAhD,sDAFS,cAEtBe,EAFsB,yBAGrBA,EAAKA,KAAKC,SAHW,gCAK5BX,QAAQC,IAAI,QAAZ,MAL4B,yDAAH,sDAQhBF,EAAc,mCAAG,WAAOJ,GAAP,gGAEPc,IAAAA,IAAA,6CAAgDd,EAAhD,sDAFO,cAEpBe,EAFoB,yBAGnBA,EAAKA,MAHc,gCAK1BV,QAAQC,IAAI,QAAZ,MAL0B,yDAAH,sDASda,EAAkB,mCAAG,WAAOC,GAAP,gGAEXN,IAAAA,IAAA,mGAAsGM,IAF3F,cAExBL,EAFwB,yBAGvBA,EAAKA,KAAKC,SAHa,gCAK9BX,QAAQC,IAAI,QAAZ,MAL8B,yDAAH,uD,iECpClBE,EAAS,SAACjB,GAAD,OAAU8B,EAAAA,GAAAA,MAAY9B,EAAM,CAC9C+B,UAAW,Q","sources":["components/Actors/Actors.styled.js","components/Actors/Actors.jsx","pages/Cast/Cast.jsx","hooks/useFetchCast.js","servises/moviesApi.js","servises/notify.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nexport const List = styled.ul`\ndisplay: grid;\ngrid-template-columns: repeat(6, 1fr);\ngrid-column-gap: 10px;\ngrid-row-gap: 1em;\nborder-top: 4px solid rgba(255,185,43,0.66);\npadding-top:10px;\n`\nexport const Item = styled.li`\nlist-style-type: none;\nfont-family: 'Work Sans', sans-serif;\nfont-weight:400;\ncolor: #ca7628;\n`\nexport const Image = styled.img`\nheight:250px;\n`\nexport const Name = styled.p`\nfont-weight:900;\nmargin:5px 0; \nfont-size:18px;\n`","import * as Scroll from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport { List, Item, Name, Image } from \"./Actors.styled\";\nimport { NoFetchResults } from \"components/NoFetchResults/NoFetchResults\";\nimport image from \"../../Images/noPoster.jpg\"\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w300';\nexport const Actors = ({ cast}) => {\n    Scroll.animateScroll.scrollMore(500);\n    return (\n        <>\n        {\n            cast.cast.length === 0 ? (<NoFetchResults text={'Sorry, no actors to show'}/>) :\n                (<List >\n                    {cast.cast.map(({ name, character, profile_path }) => <Item key={name}>\n                        {profile_path ? (<Image src={`${imgBaseUrl}${profile_path}`} alt={name} />) : (<Image src={`${image}`} alt='no poster' />)}\n                        <Name>{name}</Name>\n                        <p>{character}</p>\n                    </Item >)}\n                </List >)\n        }\n        </>  \n    )\n}\nActors.propTypes = {\n    cast: PropTypes.shape({\n    cast: PropTypes.array.isRequired,\n  })\n}","import { useParams } from \"react-router-dom\";\nimport { useFetchCast } from \"hooks/useFetchCast\";\nimport { Actors } from \"components/Actors/Actors\";\nexport default function Cast() {\n    const { movieId } = useParams();\n    const  cast = useFetchCast(movieId);\n   \n    return (<>\n    {cast&&<Actors cast={cast} />}\n    </>\n     \n    )\n}","import { useState, useEffect } from \"react\"\nimport { fetchCastsById } from \"servises/moviesApi\"\nimport { notifi } from \"servises/notify\";\n\nexport const useFetchCast = (id) => {\n    const [cast, setCast] = useState(null)\n    useEffect(() => {\n        async function fetch() {\n            try {\n                const cast = await fetchCastsById(id);\n                setCast(cast);\n            }\n            catch (error) {\n                console.log(error.message);\n                notifi(error.message);\n            }\n        }\n        fetch();\n    }, [id]);\n    return cast;\n};","import axios from \"axios\";\n\nexport const fetchMovies = async () => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=4a5a1e8e9c9af768c9d74bb009ae596f`);\n    return data.data.results\n  } catch (error) {\n   console.log('error', error) \n  }\n}\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=4a5a1e8e9c9af768c9d74bb009ae596f`);\n    return data.data\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\nexport const fetchReviewsById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=4a5a1e8e9c9af768c9d74bb009ae596f`);\n    return data.data.results\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\nexport const fetchCastsById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=4a5a1e8e9c9af768c9d74bb009ae596f`);\n    return data.data\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\n\nexport const fetchMoviesByQuery = async (query) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=4a5a1e8e9c9af768c9d74bb009ae596f&query=${query}`);\n    return data.data.results\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\n// https://api.themoviedb.org/3/movie/550?api_key=4a5a1e8e9c9af768c9d74bb009ae596f","import { toast } from 'react-toastify';\nexport const notifi = (text) => toast.error(text, {\n    autoClose: 3000,\n});"],"names":["List","styled","Item","Image","Name","Actors","cast","Scroll","length","NoFetchResults","text","map","name","character","profile_path","src","alt","image","Cast","id","useState","setCast","useEffect","fetchCastsById","console","log","message","notifi","fetch","useFetchCast","useParams","movieId","fetchMovies","axios","data","results","fetchMoviesById","fetchReviewsById","fetchMoviesByQuery","query","toast","autoClose"],"sourceRoot":""}